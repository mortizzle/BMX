@page "/"
@using BMX.Drawing
@using BMX.Engine.Interfaces
@using BMX.Models
@using BMX.UI
@using BMX.UI.Models
@using System.Collections.Immutable
@using System.Drawing
@inject IInputHandler _inputHandler;
@inject IRenderEngine _renderer;
@inject IGameEngine _gameEngine;
@inject ITimer _timer;

<div class="container">
    <div class="row">
        <div class="col border rounded p-2 canvas-container">

            <SKCanvasView
                @ref="_skView" OnPaintSurface="OnPaintSurface"
                @onpointerdown="OnPointerDown"
                style="position:absolute; left:0px; top:0px; width: 100vw; height: 100vh;"
                EnableRenderLoop/>

        </div>
    </div>
</div>

@code {
    SKCanvasView _skView = null!;
    SKPoint? touchLocation;
    Point point = new Point();
    int ticks = 0;
    ApplicationState _applicationState = null!;
    [Inject] IJSRuntime JS { get; set; } = null!;

    protected override void OnInitialized()
    {
        _applicationState = new ApplicationState
        {
            GameState = new GameState(),
            UIState = new UIState
            {
                Menus = ImmutableList.Create(MenuFactory.CreateMainMenu())
            }
        };

        if (_timer != null)
        {
            _timer.Interval = 16;
            _timer.Elapsed += GameLoopTimerElapsed;
            _timer.Start();
        }
    }

    private void GameLoopTimerElapsed(object? sender, EventArgs e) => PresentLoop();

    void PresentLoop()
    {
        _applicationState = _applicationState with { GameState = _gameEngine.UpdateGameState(_applicationState.GameState)};
        _skView.Invalidate();
        ticks++;
    }

    void OnPaintSurface(SKPaintSurfaceEventArgs e)
    {
        _renderer.Render(e.Surface.Canvas, _applicationState);
        e.Surface.Canvas.DrawText($"{point.X},{point.Y}", new SKPoint(25, 25), PaintPresets.ButtonText);
        e.Surface.Canvas.DrawText($"{ticks} ticks elapsed", new SKPoint(25, 45), PaintPresets.ButtonText);
    }

    void OnPointerDown(PointerEventArgs e)
    {
        var button = e.Button switch
        {
            0 => MouseButton.Left,
            2 => MouseButton.Right,
            _ => MouseButton.Other
        };
        var x = (int) e.OffsetX;
        var y = (int) e.OffsetY;
        point = new Point(x, y);
        _applicationState = _inputHandler.HandleMouseClick(button, x, y, _applicationState);
    }
}